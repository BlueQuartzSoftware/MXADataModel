/**
 *
@page compilenotes Compile Notes For Windows

@section basics Basics

Download and install <a href="http://www.cmake.org">CMake</a> first.
Then proceed to build all the third party libraries that are needed.
See <a href="SystemRequirements.html">this page</a> for more
information regarding the necessary libraries. The easiest way to build
the libraries is in the following order:
      <ol>
        <li>Tiff</li>
        <li>Expat</li>
        <li>Zlib and/or szip (These are optional)</li>
        <li>HDF5 Version 1.6.9</li>
        <li>Boost</li>
        <li>VTK - Only if you need to use VTK from the MXA Data Model</li>
        <li>Qt - Only if you need to Build the GUI applications</li>
        <li>MXADataModel</li>
      </ol>
      @section XXX Tiff, Expat and HDF5 Support Libraries
Download each of the libraries to your local machine.
      <ol>
        <li><a href="SourceCode/tiff.tar.gz">Tiff</a></li>
        <li><a href="SourceCode/expat.tar.gz">Expat</a></li>
        <li><a href="SourceCode/hdf5-169.tar.gz">HDF5-1.6.9</a></li>
      </ol>
Uncompress each archive using whatever utility is appropriate for your
system. Launch CMake-Gui.exe(app) and set the "Where is the source
code" field to point to the directory where the source code is located.
Now set the "Where to build the binaries" field to a different
directory. Some folks recommend to create a "Build" directory just
inside the actual source directory, as shown in the<a
 href="img/CMakeInitial.jpg" rel="thumbnail" title="CMake Screen Shot">
Screen Shot.</a> After you have set the build directory click the
"Configure" button and wait while cmake interrogates your system for
needed information. After a successful configuration step you should
end up with something that looks similar to <a
 href="img/CMakeScreenShot.jpg" rel="thumbnail"
 title="CMake Screen Shot"> this</a>. Some options that you may want to
set for each library are the following:<br>


<b>CMAKE_BUILD_TYPE</b> = Debug or Release
<br><b>CMAKE_INSTALL_PREFIX</b> = Where on your hard drive to install the library and associated files.
<br><b>BUILD_SHARED_LIBS</b> = ON | OFF
<br>On OS X I recommend Dynamic Libraries.
<br>On Linux and Windows I recommend Static Libraries.
<br><b>CMAKE_OSX_ARCHITECTURES</b> = Any semi-colon separated list of i386, ppc, x86_64, ppc64

<br>The defaults for the rest of the values should be correct
for each system.
Depending on what system you are running will dictate how you will now
build the library.
      @section XXX Windows Users with Visual Studio
If you told CMake to generate Visual Studio Projects then inside the
build directory you will find a <i>project-name</i>.sln file. Double
click on that file to launch Visual Studio and then "Build" the <i>INSTALL</i>
project. Also select either a "Debug" or "Release" configuation before
building.
      @section XXX Unix Users including OS X
If you told CMake to generate "Makefiles" then open a terminal and
navigate to the build directory that was created for you by CMake. Once
inside that folder you can issue the "make install" command.@code<br>
[fred@Ferb:Build] $ make install@endcode This will compile and install
the libraries onto your system.
      @section XXX OS X Users with Xcode
If you told CMake to generate Visual Studio Projects then inside the
build directory you will find a <i>project-name</i>.xcodeproj file.
Double click on that file to launch <a href="img/xcodeproject.jpg"
 rel="thumbnail" title="Xcode Project">Xcode </a>and then "Build" the <i>INSTALL</i>
project. Also select either a "Debug" or "Release" configuation before
building. For each library you will want to set an environment variable
that points to the installation location. On a Unix machine using bash
this would be something like:
@code
export BQ_INSTALL_ROOT="/Users/Shared/Toolkits"
export HDF5_INSTALL="$BQ_INSTALL_ROOT/hdf5-169"
export EXPAT_INSTALL="$BQ_INSTALL_ROOT/expat"
export TIFF_INSTALL="$BQ_INSTALL_ROOT/tiff"
export MXADATAMODEL_INSTALL="$BQ_INSTALL_ROOT/MXADataModel"
export BOOST_ROOT="$BQ_INSTALL_ROOT/boost-1_39"
@endcode
      @section XXX Boost Compile and Installation
Boost version 1.39.0 is the earliest version supported by the
MXADataModel library. For windows users the easiest way to get these
libraryes are to download the precompiled binaries from <a
 href="http://www.boostpro.com"> BoostPro.com</a>. Using their
installer you can select from most of the variations available with the
Boost libraries. If you choose or need to compile your own Boost
libraries this is the command that I use to create the libraries and
install them. @code<br>
bjam.exe toolset=msvc --with-test --with-program_options --with-threads<br>
--prefix=C:\Developer\VS9\boost_1_39 variant=release,debug<br>
threading=multi link=static runtime-link=shared install<br>
      @endcode For Unix and OS X users, I use the following command to
build boost:@code<br>
[fred@Ferb:Build] $ bjam toolset=darwin --with-test<br>
--with-program_options --with-thread variant=release,debug<br>
threading=multi link=static runtime-link=shared<br>
--prefix=/Users/Shared/Toolkits/boost-1_39/ architecture=combined<br>
address-model=32_64 install @endcode Let this go for a looong time
after which Boost will be installed into C:\Developer\VS9\Boost. If you
would like Boost installed somewhere else then add
--prefix=C:\Path\To\Install to the above configuration line. It is
helpful to set the "Boost_ROOT" environment variable. This will let
CMake find Boost easier. It should be set to the same path as the
"install" path from above. <br>
      @section XXX Compiling MXADataModel and Unit Tests
&nbsp;&nbsp;&nbsp;&nbsp; After you have compiled all the support
libraries you are now ready to compile the main MXADataModel library
code. In much the same way that you compiled the Tiff, Expat and HDF5
libraries, you can now compile and install the MXADataModel. <a
 href="SourceCode/MXADataModel.tar.gz">Download the MXADataModel</a>
source archive from the website. After the download has completed,
launch CMake to configure the project for your environment and generate
the IDE project files or Makefiles. Open the generated project files in
the IDE or open a terminal and compile the code. If you want to run the
unit tests, the during the CMake configuration, select the
"MXA_BUILD_TESTS" and re-configure the project. Then build the tests
and run the tests using the IDE or use "make test" if you are compiling
from the command line. All tests should pass on the major platforms.
      @section compmxatools Compiling MXATools
&nbsp;&nbsp;&nbsp; After MXADataModel has been compiled and installed
there is another project that creates GUI applications to inspect .mxa
files. The MXATools project can be download from the source codes pages
or from this <a href="SourceCode/MXATools.tar.gz">direct link.</a> The
only prerequisite is that you will need to have an installation of <a
 href="http://qt.nokia.com/downloads">Qt version 4.5 from QtSoftware.</a>
Again, use CMake to configure the project and then your preferred build
method to compile and install the libraries.<br>


 */
