/*--------------------------------------------------------------------------
 * This file is autogenerated from PrimitiveTypes.h.in during the cmake
 * configuration of your project. If you need to make changes, edit the 
 * original file NOT THIS FILE.
 * --------------------------------------------------------------------------*/


#ifndef _@PROJECT_PREFIX@Types_h
#define _@PROJECT_PREFIX@Types_h

#include "@PROJECT_PREFIX@Configuration.h"


/*--------------------------------------------------------------------------*/
/* Define named types and constants corresponding to specific integer
   and floating-point sizes and signedness.  */

/* Select an 8-bit integer type.  */
#if @PROJECT_PREFIX@_SIZEOF_CHAR == 1
#ifndef _UINT8_T
#define _UINT8_T
typedef unsigned char         uint8_t;
#endif /*_UINT8_T */

#ifndef _INT8_T
#define _INT8_T
typedef signed char           int8_t;
#endif /*_INT8_T */

# define @PROJECT_PREFIX@_TYPE_UINT8 @PROJECT_PREFIX@_UNSIGNED_CHAR
# if @PROJECT_PREFIX@_TYPE_CHAR_IS_SIGNED
#  define @PROJECT_PREFIX@_TYPE_INT8 @PROJECT_PREFIX@_CHAR
# else
#  define @PROJECT_PREFIX@_TYPE_INT8 @PROJECT_PREFIX@_SIGNED_CHAR
# endif
#else
# error "No native data type can represent an 8-bit integer."
#endif

/* Select a 16-bit integer type.  */
#if @PROJECT_PREFIX@_SIZEOF_SHORT == 2
#ifndef _UINT16_T
#define _UINT16_T
typedef unsigned short       uint16_t;
#endif /* _UINT16_T */

#ifndef _INT16_T
#define _INT16_T
typedef short                int16_t;
#endif /* _INT16_T */

# define @PROJECT_PREFIX@_TYPE_UINT16 @PROJECT_PREFIX@_UNSIGNED_SHORT
# define @PROJECT_PREFIX@_TYPE_INT16 @PROJECT_PREFIX@_SHORT
#elif @PROJECT_PREFIX@_SIZEOF_INT == 2
#ifndef _UINT16_T
#define _UINT16_T
typedef unsigned int       uint16_t;
#endif /* _UINT16_T */

#ifndef _INT16_T
#define _INT16_T
typedef int                int16_t;
#endif /* _INT16_T */
# define @PROJECT_PREFIX@_TYPE_UINT16 @PROJECT_PREFIX@_UNSIGNED_INT
# define @PROJECT_PREFIX@_TYPE_INT16 @PROJECT_PREFIX@_INT
#else
# error "No native data type can represent a 16-bit integer."
#endif

/* Select a 32-bit integer type.  */
#if @PROJECT_PREFIX@_SIZEOF_INT == 4
#ifndef _UINT32_T
#define _UINT32_T
typedef unsigned int         uint32_t;
#endif /* _UINT32_T */

#ifndef _INT32_T
#define _INT32_T
typedef int                  int32_t;
#endif /* _INT32_T */
# define @PROJECT_PREFIX@_TYPE_UINT32 @PROJECT_PREFIX@_UNSIGNED_INT
# define @PROJECT_PREFIX@_TYPE_INT32 @PROJECT_PREFIX@_INT
#elif @PROJECT_PREFIX@_SIZEOF_LONG == 4
#ifndef _UINT32_T
#define _UINT32_T
typedef unsigned long         uint32_t;
#endif /* _UINT32_T */

#ifndef _INT32_T
#define _INT32_T
typedef long                  int32_t;
#endif /* _INT32_T */
# define @PROJECT_PREFIX@_TYPE_UINT32 @PROJECT_PREFIX@_UNSIGNED_LONG
# define @PROJECT_PREFIX@_TYPE_INT32 @PROJECT_PREFIX@_LONG
#else
# error "No native data type can represent a 32-bit integer."
#endif

/* Select a 64-bit integer type.  */
#if defined(@PROJECT_PREFIX@_TYPE_USE_LONG_LONG) && @PROJECT_PREFIX@_SIZEOF_LONG_LONG == 8
  #ifndef _UINT64_T
  #define _UINT64_T
  typedef unsigned long long   uint64_t;
  #endif /* _UINT64_T */

  #ifndef _INT64_T
  #define _INT64_T
  typedef long long            int64_t;
  #endif /* _INT64_T */
  
  # define @PROJECT_PREFIX@_TYPE_UINT64 @PROJECT_PREFIX@_UNSIGNED_LONG_LONG
  # define @PROJECT_PREFIX@_TYPE_INT64 @PROJECT_PREFIX@_LONG_LONG

#elif @PROJECT_PREFIX@_SIZEOF_LONG == 8
  #ifndef _UINT64_T
  #define _UINT64_T
  typedef unsigned long   uint64_t;
  #endif /* _UINT64_T */
  
  #ifndef _INT64_T
  #define _INT64_T
  typedef long            int64_t;
  #endif /* _INT64_T */
  # define @PROJECT_PREFIX@_TYPE_UINT64 @PROJECT_PREFIX@_UNSIGNED_LONG
  # define @PROJECT_PREFIX@_TYPE_INT64 @PROJECT_PREFIX@_LONG

#elif defined(@PROJECT_PREFIX@_TYPE_USE___INT64) && @PROJECT_PREFIX@_SIZEOF___INT64 == 8

  #ifndef _UINT64_T
  #define _UINT64_T
  typedef unsigned __int64 uint64;
  #endif /* _UINT64_T */
  
  #ifndef _INT64_T
  #define _INT64_T
  typedef signed __int64   int64;
  #endif /* _INT64_T */

  # define @PROJECT_PREFIX@_TYPE_UINT64 @PROJECT_PREFIX@_UNSIGNED___INT64
  # define @PROJECT_PREFIX@_TYPE_INT64 @PROJECT_PREFIX@___INT64

#else
# error "No native data type can represent a 64-bit integer."
#endif

/* Select a 32-bit floating point type.  */
#if @PROJECT_PREFIX@_SIZEOF_FLOAT == 4
typedef float float32;
# define @PROJECT_PREFIX@_TYPE_FLOAT32 @PROJECT_PREFIX@_FLOAT
#else
# error "No native data type can represent a 32-bit floating point value."
#endif

/* Select a 64-bit floating point type.  */
#if @PROJECT_PREFIX@_SIZEOF_DOUBLE == 8
typedef double float64;
# define @PROJECT_PREFIX@_TYPE_FLOAT64 @PROJECT_PREFIX@_DOUBLE
#else
# error "No native data type can represent a 64-bit floating point value."
#endif

/* For those operating systems that don't actually have a stdint.h file, this section
 * is taken from an OS X stdint.h file and should work just fine with the include
 * guard.
 */
#ifndef @PROJECT_PREFIX@_HAVE_STDINT_H
/* 7.18.2 Limits of specified-width integer types:
 *   These #defines specify the minimum and maximum limits
 *   of each of the types declared above.
 */


/* 7.18.2.1 Limits of exact-width integer types */
#define INT8_MAX         127
#define INT16_MAX        32767
#define INT32_MAX        2147483647
#define INT64_MAX        9223372036854775807LL

#define INT8_MIN          -128
#define INT16_MIN         -32768
   /*
      Note:  the literal "most negative int" cannot be written in C --
      the rules in the standard (section 6.4.4.1 in C99) will give it
      an unsigned type, so INT32_MIN (and the most negative member of
      any larger signed type) must be written via a constant expression.
   */
#define INT32_MIN        (-INT32_MAX-1)
#define INT64_MIN        (-INT64_MAX-1)

#define UINT8_MAX         255
#define UINT16_MAX        65535
#define UINT32_MAX        4294967295U
#define UINT64_MAX        18446744073709551615ULL

/* 7.18.4 Macros for integer constants */
#define INT8_C(v)    (v)
#define INT16_C(v)   (v)
#define INT32_C(v)   (v)
//Define INT64_C for compilers that don't have it
#if (!defined(INT64_C))
#define INT64_C(v)   (v ## LL)
#endif

#define UINT8_C(v)   (v ## U)
#define UINT16_C(v)  (v ## U)
#define UINT32_C(v)  (v ## U)
#define UINT64_C(v)  (v ## ULL)

#define INTMAX_C(v)  (v ## LL)
#define UINTMAX_C(v) (v ## ULL)

#endif

/*--------------------------------------------------------------------------*/
/* Define a casting macro for use by the constants below.  */
#if defined(__cplusplus)
# define @PROJECT_PREFIX@_TYPE_CAST(T, V) static_cast< T >(V)
#else
# define @PROJECT_PREFIX@_TYPE_CAST(T, V) ((T)(V))
#endif

/*--------------------------------------------------------------------------*/
/* Define min/max constants for each type.  */
#define @PROJECT_PREFIX@_BIT_MIN                 0
#define @PROJECT_PREFIX@_BIT_MAX                 1
#if @PROJECT_PREFIX@_TYPE_CHAR_IS_SIGNED
# define @PROJECT_PREFIX@_CHAR_MIN               @PROJECT_PREFIX@_TYPE_CAST(char, 0x80)
# define @PROJECT_PREFIX@_CHAR_MAX               @PROJECT_PREFIX@_TYPE_CAST(char, 0x7f)
#else
# define @PROJECT_PREFIX@_CHAR_MIN               @PROJECT_PREFIX@_TYPE_CAST(char, 0u)
# define @PROJECT_PREFIX@_CHAR_MAX               @PROJECT_PREFIX@_TYPE_CAST(char, 0xffu)
#endif
#define @PROJECT_PREFIX@_SIGNED_CHAR_MIN         @PROJECT_PREFIX@_TYPE_CAST(signed char, 0x80)
#define @PROJECT_PREFIX@_SIGNED_CHAR_MAX         @PROJECT_PREFIX@_TYPE_CAST(signed char, 0x7f)
#define @PROJECT_PREFIX@_UNSIGNED_CHAR_MIN       @PROJECT_PREFIX@_TYPE_CAST(unsigned char, 0u)
#define @PROJECT_PREFIX@_UNSIGNED_CHAR_MAX       @PROJECT_PREFIX@_TYPE_CAST(unsigned char, 0xffu)
#define @PROJECT_PREFIX@_SHORT_MIN               @PROJECT_PREFIX@_TYPE_CAST(short, 0x8000)
#define @PROJECT_PREFIX@_SHORT_MAX               @PROJECT_PREFIX@_TYPE_CAST(short, 0x7fff)
#define @PROJECT_PREFIX@_UNSIGNED_SHORT_MIN      @PROJECT_PREFIX@_TYPE_CAST(unsigned short, 0u)
#define @PROJECT_PREFIX@_UNSIGNED_SHORT_MAX      @PROJECT_PREFIX@_TYPE_CAST(unsigned short, 0xffffu)
#define @PROJECT_PREFIX@_INT_MIN                 @PROJECT_PREFIX@_TYPE_CAST(int, ~(~0u >> 1))
#define @PROJECT_PREFIX@_INT_MAX                 @PROJECT_PREFIX@_TYPE_CAST(int, ~0u >> 1)
#define @PROJECT_PREFIX@_UNSIGNED_INT_MIN        @PROJECT_PREFIX@_TYPE_CAST(unsigned int, 0)
#define @PROJECT_PREFIX@_UNSIGNED_INT_MAX        @PROJECT_PREFIX@_TYPE_CAST(unsigned int, ~0u)
#define @PROJECT_PREFIX@_LONG_MIN                @PROJECT_PREFIX@_TYPE_CAST(long, ~(~0ul >> 1))
#define @PROJECT_PREFIX@_LONG_MAX                @PROJECT_PREFIX@_TYPE_CAST(long, ~0ul >> 1)
#define @PROJECT_PREFIX@_UNSIGNED_LONG_MIN       @PROJECT_PREFIX@_TYPE_CAST(unsigned long, 0ul)
#define @PROJECT_PREFIX@_UNSIGNED_LONG_MAX       @PROJECT_PREFIX@_TYPE_CAST(unsigned long, ~0ul)
#define @PROJECT_PREFIX@_FLOAT_MIN               @PROJECT_PREFIX@_TYPE_CAST(float, -1.0e+38f)
#define @PROJECT_PREFIX@_FLOAT_MAX               @PROJECT_PREFIX@_TYPE_CAST(float,  1.0e+38f)
#define @PROJECT_PREFIX@_DOUBLE_MIN              @PROJECT_PREFIX@_TYPE_CAST(double, -1.0e+299)
#define @PROJECT_PREFIX@_DOUBLE_MAX              @PROJECT_PREFIX@_TYPE_CAST(double,  1.0e+299)
#if defined(@PROJECT_PREFIX@_SIZEOF_LONG_LONG)
# define @PROJECT_PREFIX@_LONG_LONG_MIN          @PROJECT_PREFIX@_TYPE_CAST(long long, ~(~0ull >> 1))
# define @PROJECT_PREFIX@_LONG_LONG_MAX          @PROJECT_PREFIX@_TYPE_CAST(long long, ~0ull >> 1)
# define @PROJECT_PREFIX@_UNSIGNED_LONG_LONG_MIN @PROJECT_PREFIX@_TYPE_CAST(unsigned long long, 0ull)
# define @PROJECT_PREFIX@_UNSIGNED_LONG_LONG_MAX @PROJECT_PREFIX@_TYPE_CAST(unsigned long long, ~0ull)
#endif
#if defined(@PROJECT_PREFIX@_SIZEOF___INT64)
# define @PROJECT_PREFIX@___INT64_MIN            @PROJECT_PREFIX@_TYPE_CAST(__int64, ~(~0ui64 >> 1))
# define @PROJECT_PREFIX@___INT64_MAX            @PROJECT_PREFIX@_TYPE_CAST(__int64, ~0ui64 >> 1)
# define @PROJECT_PREFIX@_UNSIGNED___INT64_MIN   @PROJECT_PREFIX@_TYPE_CAST(unsigned __int64, 0ui64)
# define @PROJECT_PREFIX@_UNSIGNED___INT64_MAX   @PROJECT_PREFIX@_TYPE_CAST(unsigned __int64, ~0ui64)
#endif

/* Define compatibility names for these constants.  */
#define @PROJECT_PREFIX@_LARGE_INTEGER @PROJECT_PREFIX@_INT_MAX
#define @PROJECT_PREFIX@_LARGE_FLOAT @PROJECT_PREFIX@_FLOAT_MAX
#endif
