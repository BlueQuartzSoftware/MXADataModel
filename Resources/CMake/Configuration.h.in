/*--------------------------------------------------------------------------
 * This file is autogenerated from MXAConfiguration.h.in during the cmake
 * configuration of your project. If you need to make changes, edit the 
 * original file NOT THIS FILE.
 * --------------------------------------------------------------------------*/

/* Define if you are running on a Microsoft Windows Platform */
#cmakedefine MXA_HAVE_WINDOWS @MXA_HAVE_WINDOWS@

/* Define if your system has the <winsock.h> header file */
#cmakedefine MXA_HAVE_WINSOCK_H @MXA_HAVE_WINSOCK_H@

/* Define if you need to use sockets */
#cmakedefine MXA_NEED_SOCKETS @MXA_NEED_SOCKETS@

/* Define to 1 if you have the <stddef.h> header file. */
#cmakedefine MXA_HAVE_STDDEF_H @MXA_HAVE_STDDEF_H@

/* Define to 1 if you have the <stdint.h> header file. */
#cmakedefine MXA_HAVE_STDINT_H @MXA_HAVE_STDINT_H@

/* Define to 1 if you have the <stdlib.h> header file. */
#cmakedefine MXA_HAVE_STDLIB_H @MXA_HAVE_STDLIB_H@

/* Define to 1 if you have the <setjmp.h> header file. */
#cmakedefine MXA_HAVE_SETJMP_H @MXA_HAVE_SETJMP_H@

/* Define to 1 if you have the <string.h> header file. */
#cmakedefine MXA_HAVE_STRING_H @MXA_HAVE_STRING_H@

/* Define to 1 if you have the <stdio.h> header file.  */
#cmakedefine MXA_HAVE_STDIO_H @MXA_HAVE_STDIO_H@

/* Define to 1 if you have the <math.h> header file.  */
#cmakedefine MXA_HAVE_MATH_H @MXA_HAVE_MATH_H@

/* Define to 1 if you have the <time.h> header file. */
#cmakedefine MXA_HAVE_TIME_H @MXA_HAVE_TIME_H@

/* Define to 1 if you have the <sys/time.h> header file. */
#cmakedefine MXA_HAVE_SYS_TIME_H @MXA_HAVE_SYS_TIME_H@

/* Define to 1 if you have the <sys/types.h> header file. */
#cmakedefine MXA_HAVE_SYS_TYPES_H @MXA_HAVE_SYS_TYPES_H@

/* Define to 1 if you have the <sys/socket.h> header file. */
#cmakedefine MXA_HAVE_SYS_SOCKET_H @MXA_HAVE_SYS_SOCKET_H@

/* Define to 1 if you have the <netinet/in.h> header file. */
#cmakedefine MXA_HAVE_NETINET_IN_H @MXA_HAVE_NETINET_IN_H@

/* Define to 1 if you have the <arpa/inet.h> header file. */
#cmakedefine MXA_HAVE_ARPA_INET_H @MXA_HAVE_ARPA_INET_H@

/* Define to 1 if you have the <unistd.h> header file. */
#cmakedefine MXA_HAVE_UNISTD_H @MXA_HAVE_UNISTD_H@

/* Define to 1 if you have the <fcntl.h> header file. */
#cmakedefine MXA_HAVE_FCNTL_H @MXA_HAVE_FCNTL_H@

/* Define to 1 if you have the <errno.h> header file. */
#cmakedefine MXA_HAVE_ERRNO_H @MXA_HAVE_ERRNO_H@

/* The size of `char', as computed by sizeof. */
#define MXA_SIZEOF_CHAR @MXA_SIZEOF_CHAR@

/* The size of `short', as computed by sizeof. */
#define MXA_SIZEOF_SHORT @MXA_SIZEOF_SHORT@

/* The size of `int', as computed by sizeof. */
#define MXA_SIZEOF_INT @MXA_SIZEOF_INT@

/* The size of `double', as computed by sizeof. */
#define MXA_SIZEOF_DOUBLE @MXA_SIZEOF_DOUBLE@

/* The size of `float', as computed by sizeof. */
#define MXA_SIZEOF_FLOAT @MXA_SIZEOF_FLOAT@

/* The size of `int8_t', as computed by sizeof. */
#define MXA_SIZEOF_INT8_T @MXA_SIZEOF_INT8_T@

/* The size of `int16_t', as computed by sizeof. */
#define MXA_SIZEOF_INT16_T @MXA_SIZEOF_INT16_T@

/* The size of `int32_t', as computed by sizeof. */
#define MXA_SIZEOF_INT32_T @MXA_SIZEOF_INT32_T@

/* The size of `int64_t', as computed by sizeof. */
#define MXA_SIZEOF_INT64_T @MXA_SIZEOF_INT64_T@

/* The size of `int_fast16_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_FAST16_T @MXA_SIZEOF_INT_FAST16_T@

/* The size of `int_fast32_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_FAST32_T @MXA_SIZEOF_INT_FAST32_T@

/* The size of `int_fast64_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_FAST64_T @MXA_SIZEOF_INT_FAST64_T@

/* The size of `int_fast8_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_FAST8_T @MXA_SIZEOF_INT_FAST8_T@

/* The size of `int_least16_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_LEAST16_T @MXA_SIZEOF_INT_LEAST16_T@

/* The size of `int_least32_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_LEAST32_T @MXA_SIZEOF_INT_LEAST32_T@

/* The size of `int_least64_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_LEAST64_T @MXA_SIZEOF_INT_LEAST64_T@

/* The size of `int_least8_t', as computed by sizeof. */
#define MXA_SIZEOF_INT_LEAST8_T @MXA_SIZEOF_INT_LEAST8_T@

#if !defined(__APPLE__)
/* The size of `size_t', as computed by sizeof. */
#define MXA_SIZEOF_SIZE_T @MXA_SIZEOF_SIZE_T@

/* The size of `ssize_t', as computed by sizeof. */
#define MXA_SIZEOF_SSIZE_T @MXA_SIZEOF_SSIZE_T@

/* The size of `long', as computed by sizeof. */
#define MXA_SIZEOF_LONG @MXA_SIZEOF_LONG@

#else
   # if defined(__LP64__) && __LP64__
  #define MXA_SIZEOF_LONG 8
  #define MXA_SIZEOF_SIZE_T 8
  #define MXA_SIZEOF_SSIZE_T 8
  # else
  #define MXA_SIZEOF_LONG 4
  #define MXA_SIZEOF_SIZE_T 4
  #define MXA_SIZEOF_SSIZE_T 4
  # endif

#endif

/* The size of `long double', as computed by sizeof. */
#define MXA_SIZEOF_LONG_DOUBLE @MXA_SIZEOF_LONG_DOUBLE@

/* Define size of long long and/or __int64 bit integer type only if the type
   exists.  */
#if !defined(__APPLE__)
 #define MXA_SIZEOF_LONG_LONG @MXA_SIZEOF_LONG_LONG@
#else
 #define MXA_SIZEOF_LONG_LONG 8
#endif

/* The size of `off64_t', as computed by sizeof. */
#define MXA_SIZEOF_OFF64_T @MXA_SIZEOF_OFF64_T@

/* The size of `off_t', as computed by sizeof. */
#define MXA_SIZEOF_OFF_T @MXA_SIZEOF_OFF_T@

/* The size of `uint16_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT16_T @MXA_SIZEOF_UINT16_T@

/* The size of `uint32_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT32_T @MXA_SIZEOF_UINT32_T@

/* The size of `uint64_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT64_T @MXA_SIZEOF_UINT64_T@

/* The size of `uint8_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT8_T @MXA_SIZEOF_UINT8_T@

/* The size of `uint_fast16_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_FAST16_T @MXA_SIZEOF_UINT_FAST16_T@

/* The size of `uint_fast32_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_FAST32_T @MXA_SIZEOF_UINT_FAST32_T@

/* The size of `uint_fast64_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_FAST64_T @MXA_SIZEOF_UINT_FAST64_T@

/* The size of `uint_fast8_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_FAST8_T @MXA_SIZEOF_UINT_FAST8_T@

/* The size of `uint_least16_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_LEAST16_T @MXA_SIZEOF_UINT_LEAST16_T@

/* The size of `uint_least32_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_LEAST32_T @MXA_SIZEOF_UINT_LEAST32_T@

/* The size of `uint_least64_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_LEAST64_T @MXA_SIZEOF_UINT_LEAST64_T@

/* The size of `uint_least8_t', as computed by sizeof. */
#define MXA_SIZEOF_UINT_LEAST8_T @MXA_SIZEOF_UINT_LEAST8_T@

/* The size of `unsigned', as computed by sizeof. */
#define MXA_SIZEOF_UNSIGNED @MXA_SIZEOF_UNSIGNED@

/* The size of `__int64', as computed by sizeof. */
#define MXA_SIZEOF___INT64 @MXA_SIZEOF___INT64@

/* Can we use long long safely */
#cmakedefine MXA_TYPE_USE_LONG_LONG @MXA_TYPE_USE_LONG_LONG@

/* Can we use __int64 safely */
#cmakedefine MXA_TYPE_USE___INT64 @MXA_TYPE_USE___INT64@

/* Define to 1 if you have the <sys/stat.h> header file. */
#cmakedefine MXA_HAVE_SYS_STAT_H @MXA_HAVE_SYS_STAT_H@

/* Byte order.  */
/* All compilers that support Mac OS X define either __BIG_ENDIAN__ or
   __LITTLE_ENDIAN__ to match the endianness of the architecture being
   compiled for. This is not necessarily the same as the architecture of the
   machine doing the building. In order to support Universal Binaries on
   Mac OS X, we prefer those defines to decide the endianness.
   On other platforms we use the result of the TRY_RUN. */
#if !defined(__APPLE__)
 #cmakedefine MXA_WORDS_BIGENDIAN
#elif defined(__BIG_ENDIAN__)
# define MXA_WORDS_BIGENDIAN
#endif

/* This section is particular to MXADataModel and its needs. */

/* Did we compile with HDF5 support */
#define MXA_HDF5_SUPPORT @MXA_HDF5_SUPPORT@

/* Are we using HDF5 primitives in some of the code sources */
#cmakedefine MXA_USE_HDF5_PRIMITIVE_TYPES @MXA_USE_HDF5_PRIMITIVE_TYPES@

/* Are we using MXA types and classes in the H5Lite methods */
#cmakedefine H5LITE_USE_MXA_CONSTRUCTS @H5LITE_USE_MXA_CONSTRUCTS@

/* Are we compiling Tiff support using an external libTiff */
#define MXA_TIFF_SUPPORT @MXA_TIFF_SUPPORT@

/* Are we compiling the VTK<-->HDF5 bridge code */
#define HDF5_VTK_BRIDGE @HDF5_VTK_BRIDGE@

/* Are we compiling with XML support */
#define MXA_XML_SUPPORT @MXA_XML_SUPPORT@

/* Do we have the "gettimeofday" function */
#cmakedefine MXA_HAVE_TIME_GETTIMEOFDAY @MXA_HAVE_TIME_GETTIMEOFDAY@

/* Do we the the sys/time.h getttimeofday function */
#cmakedefine MXA_HAVE_SYS_TIME_GETTIMEOFDAY @MXA_HAVE_SYS_TIME_GETTIMEOFDAY@

/* Define to 1 when MXADataModel is built as a dynamic library (All platforms)*/
#cmakedefine MXA_BUILT_AS_DYNAMIC_LIB @MXA_BUILT_AS_DYNAMIC_LIB@

/* What system is the library running */
#define MXADATAMODEL_SYSTEM "@CMAKE_SYSTEM@"

/* What is the name of our FileReader Class */
#define MXAFILEREADER_CLASS_NAME MXAFileReader64

/* What is the name of our File Writer Class */
#define MXAFILEWRITER_CLASS_NAME MXAFileWriter64

/* Should we use Boost Shared_Pointer Wrapped strings*/
#cmakedefine MXA_USE_SHARED_STRINGS @MXA_USE_SHARED_STRINGS@

/* The Following include MUST appear AFTER MXA_BUILT_AS_DYNAMIC_LIB has been defined */
#include <MXA/Common/DLLExport.h>