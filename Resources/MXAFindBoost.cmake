# - Try to find Boost
# Once done this will define
#
#  BOOST_FOUND - System has Boost
#  BOOST_INCLUDE_DIRS - Boost include directory
#  BOOST_LIBRARIES - Link these to use Boost
#  BOOST_LIBRARY_DIRS - The path to where the Boost library files are.
#  BOOST_DEFINITIONS - Compiler switches required for using Boost
#  BOOST_LIBRARIES_SUFFIX - Boost libraries name suffix (e.g -vc71-mt-gd-1_34, -gcc41-mt...)
#
#  BOOST_DATE_TIME_FOUND               True IF Boost Date Time was found.
#  BOOST_FILESYSTEM_FOUND              True IF Boost Filesystem was found.
#  BOOST_IOSTREAMS_FOUND               True IF Boost Iostream was found.
#  BOOST_PRG_EXEC_MONITOR_FOUND        True IF Boost Program Exec Monitor was found.
#  BOOST_PROGRAM_OPTIONS_FOUND         True IF Boost Program Options was found.
#  BOOST_PYTHON_FOUND                  True IF Boost Python was found.
#  BOOST_REGEX_FOUND                   True IF Boost Regex was found.
#  BOOST_SERIALIZATION_FOUND           True IF Boost Serialization was found.
#  BOOST_SIGNALS_FOUND                 True IF Boost Signals was found.
#  BOOST_TEST_EXEC_MONITOR_FOUND       True IF Boost Test Exec Monitor was found.
#  BOOST_THREAD-MT_FOUND               True IF Boost Thread was found.
#  BOOST_UNIT_TEST_FRAMEWORK_FOUND     True IF Boost Unit Test Framework was found.
#  BOOST_WSERIALIZATION_FOUND          True IF Boost WSerialization was found.
#
#  BOOST_DATE_TIME_LIBRARY             The Boost Date Time libary.
#  BOOST_FILESYSTEM_LIBRARY            The Boost Filesystem libary.
#  BOOST_IOSTREAMS_LIBRARY             The Boost Iostream libary.
#  BOOST_PRG_EXEC_MONITOR_LIBRARY      The Boost Program libary.
#  BOOST_PROGRAM_OPTIONS_LIBRARY       The Boost Program libary.
#  BOOST_PYTHON_LIBRARY                The Boost Python libary.
#  BOOST_REGEX_LIBRARY                 The Boost Regex libary.
#  BOOST_SERIALIZATION_LIBRARY         The Boost Serialization libary.
#  BOOST_SIGNALS_LIBRARY               The Boost Signals libary.
#  BOOST_TEST_EXEC_MONITOR_LIBRARY     The Boost Test Exec Monitor libary.
#  BOOST_THREAD_LIBRARY                The Boost Thread libary.
#  BOOST_UNIT_TEST_FRAMEWORK_LIBRARY   The Boost Unit Test Framework libary.
#  BOOST_WSERIALIZATION_LIBRARY        The Boost WSerialization libary.
#
#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>
#  Copyright (c) 2007 Wengo
#
#  Redistribution AND use is allowed according to the terms of the New
#  BSD license.
#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.
#

MESSAGE(STATUS "Finding Boost libraries.... ")
IF (NOT DEFINED BOOST_CURRENT_VERSION)
    SET ( BOOST_CURRENT_VERSION "1_34_1")
ENDIF (NOT DEFINED BOOST_CURRENT_VERSION)
# SET (BOOST_LIBRARIES "")
# SET (BOOST_INCLUDE_DIRS "")
IF (BOOST_LIBRARIES AND BOOST_INCLUDE_DIRS)
  # in cache already
  SET(BOOST_FOUND TRUE)
ELSE (BOOST_LIBRARIES AND BOOST_INCLUDE_DIRS)

  # Add in some path suffixes. These will have to be updated whenever
  # a new Boost version comes out.
  SET(BOOST_PATH_SUFFIX
    boost-${BOOST_CURRENT_VERSION}
  )

  SET(BOOST_INCLUDE_SEARCH_DIRS
    $ENV{BOOSTINCLUDEDIR}
    $ENV{BOOST_ROOT}/include
    C:/boost/include
    "C:/Program Files/boost/boost_${BOOST_CURRENT_VERSION}"
    # D: is very often the cdrom drive, IF you don't have a
    # cdrom inserted it will popup a very annoying dialog
    #D:/boost/include
    /usr/include
    /usr/local/include
    /opt/local/include
    /sw/include
  )
  
  SET(BOOST_LIBRARIES_SEARCH_DIRS
    $ENV{BOOSTLIBDIR}
    $ENV{BOOST_ROOT}/lib
    C:/boost/lib
    "C:/Program Files/boost/boost_${BOOST_CURRENT_VERSION}/lib"
    /usr/lib
    /usr/local/lib
    /opt/local/lib
    /sw/lib
  )
  
  IF (WIN32)
    # In windows, automatic linking is performed, so you do not have to specify the libraries.
    # If you are linking to a dynamic runtime, then you can choose to link to either a static or a
    # dynamic Boost library, the default is to do a static link.  You can alter this for a specific
    # library "whatever" by defining BOOST_WHATEVER_DYN_LINK to force Boost library "whatever" to
    # be linked dynamically.  Alternatively you can force all Boost libraries to dynamic link by
    # defining BOOST_ALL_DYN_LINK.

    # This feature can be disabled for Boost library "whatever" by defining BOOST_WHATEVER_NO_LIB,
    # or for all of Boost by defining BOOST_ALL_NO_LIB.

    # If you want to observe which libraries are being linked against then defining
    # BOOST_LIB_DIAGNOSTIC will cause the auto-linking code to emit a #pragma MESSAGE each time
    # a library is selected for linking.
    SET(BOOST_LIB_DIAGNOSTIC_DEFINITIONS "-DBOOST_LIB_DIAGNOSTIC" "-DBOOST_ALL_NO_LIB")
  ENDIF(WIN32)

  FIND_PATH(BOOST_INCLUDE_DIR
    NAMES
      boost/config.hpp
    PATHS
      ${BOOST_INCLUDE_SEARCH_DIRS}
    PATH_SUFFIXES
      ${BOOST_PATH_SUFFIX}
  )
  
#-------------------------------------------------------------------------------

  SET (BOOST_LIB_LIST
    date_time
    filesystem
    iostreams
    prg_exec_monitor
    program_options
    python
    regex
    serialization
    signals
    test_exec_monitor
    thread
    unit_test_framework
    wserialization
  )
  SET (BOOST_LIB_PREFIX "lib")
  SET (BOOST_COMPILER "gcc")
  IF (MSVC71)
    SET (BOOST_COMPILER "-vc71")
  ENDIF(MSVC71)
   IF (MSVC80)
    SET (BOOST_COMPILER "-vc80")
  ENDIF(MSVC80) 
  IF (MINGW)
    SET (BOOST_COMPILER "-mgw")
  ENDIF(MINGW)
  IF (CYGWIN)
    SET (BOOST_COMPILER "-gcc")
  ENDIF (CYGWIN)
  IF (UNIX)
    IF (APPLE)
        SET (BOOST_COMPILER "")
    ELSE (APPLE)
        SET (BOOST_COMPILER "-gcc")
    ENDIF (APPLE)
  ENDIF(UNIX)
  
  SET (BOOST_MULTITHREADED "-mt")
  

  IF (WIN32)
    SET (BOOST_ABI_TAG "g")
  ENDIF(WIN32)
  SET (BOOST_ABI_TAG "-${BOOST_ABI_TAG}d")
  
  SET (BOOST_EXTENSION "a")
  IF (WIN32)
    SET (BOOST_EXTENSION "lib")
  ENDIF (WIN32)
  
#  BOOST_DATE_TIME_LIBRARY             The Boost Date Time libary.
  SET (BOOST_LIB date_time)
  SET (BOOST_PARTIAL_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})

  FIND_LIBRARY(BOOST_DATE_TIME_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    FORCE
    )
  IF (BOOST_DATE_TIME_LIBRARY)
    # MESSAGE(STATUS "Found ${BOOST_DATE_TIME_LIBRARY}")
    SET (BOOST_DATE_TIME_FOUND TRUE)
    SET(BOOST_LIBRARIES
      ${BOOST_LIBRARIES}
      ${BOOST_DATE_TIME_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_DATE_TIME_LIBRARY)
  ENDIF (BOOST_DATE_TIME_LIBRARY)


#  BOOST_FILESYSTEM_LIBRARY            The Boost Filesystem libary.
  SET (BOOST_LIB filesystem)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
   # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
   # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_FILESYSTEM_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_FILESYSTEM_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_FILESYSTEM_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_FILESYSTEM_DEBUG_LIBRARY)
    # MESSAGE(STATUS "Found ${BOOST_FILESYSTEM_DEBUG_LIBRARY}")
  ENDIF (BOOST_FILESYSTEM_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_FILESYSTEM_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_FILESYSTEM_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_FILESYSTEM_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_FILESYSTEM_RELEASE_LIBRARY)
    # MESSAGE(STATUS "Found ${BOOST_FILESYSTEM_RELEASE_LIBRARY}")
  ENDIF (BOOST_FILESYSTEM_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_FILESYSTEM_RELEASE_LIBRARY: ${BOOST_FILESYSTEM_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_FILESYSTEM_DEBUG_LIBRARY: ${BOOST_FILESYSTEM_DEBUG_LIBRARY}")
  
#  BOOST_IOSTREAMS_LIBRARY             The Boost Iostream libary.
  SET (BOOST_LIB iostreams)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_IOSTREAMS_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_IOSTREAMS_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_IOSTREAMS_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_IOSTREAMS_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_IOSTREAMS_DEBUG_LIBRARY}")
  ENDIF (BOOST_IOSTREAMS_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_IOSTREAMS_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_IOSTREAMS_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_IOSTREAMS_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_IOSTREAMS_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_IOSTREAMS_RELEASE_LIBRARY}")
  ENDIF (BOOST_IOSTREAMS_RELEASE_LIBRARY)
  # # MESSAGE(STATUS "BOOST_IOSTREAMS_RELEASE_LIBRARY: ${BOOST_IOSTREAMS_RELEASE_LIBRARY}")
  # # MESSAGE(STATUS "BOOST_IOSTREAMS_DEBUG_LIBRARY: ${BOOST_IOSTREAMS_DEBUG_LIBRARY}")

#  BOOST_PRG_EXEC_MONITOR_LIBRARY      The Boost Program libary.
  SET (BOOST_LIB prg_exec_monitor)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY}")
  ENDIF (BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY}")
  ENDIF (BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY)
   # MESSAGE(STATUS "BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY: ${BOOST_PRG_EXEC_MONITOR_RELEASE_LIBRARY}")
   # MESSAGE(STATUS "BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY: ${BOOST_PRG_EXEC_MONITOR_DEBUG_LIBRARY}")
  
  
#  BOOST_PROGRAM_OPTIONS_LIBRARY       The Boost Program libary.
  SET (BOOST_LIB program_options)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY}")
  ENDIF (BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY}")
  ENDIF (BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY: ${BOOST_PROGRAM_OPTIONS_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY: ${BOOST_PROGRAM_OPTIONS_DEBUG_LIBRARY}")


#  BOOST_PYTHON_LIBRARY                The Boost Python libary.
  SET (BOOST_LIB python)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_PYTHON_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PYTHON_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_PYTHON_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PYTHON_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PYTHON_DEBUG_LIBRARY}")
  ENDIF (BOOST_PYTHON_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_PYTHON_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_PYTHON_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_PYTHON_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_PYTHON_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_PYTHON_RELEASE_LIBRARY}")
  ENDIF (BOOST_PYTHON_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_PYTHON_RELEASE_LIBRARY: ${BOOST_PYTHON_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_PYTHON_DEBUG_LIBRARY: ${BOOST_PYTHON_DEBUG_LIBRARY}")

#  BOOST_REGEX_LIBRARY                 The Boost Regex libary.
  SET (BOOST_LIB regex)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_REGEX_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_REGEX_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_REGEX_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_REGEX_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_REGEX_DEBUG_LIBRARY}")
  ENDIF (BOOST_REGEX_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_REGEX_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_REGEX_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_REGEX_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_REGEX_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_REGEX_RELEASE_LIBRARY}")
  ENDIF (BOOST_REGEX_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_REGEX_RELEASE_LIBRARY: ${BOOST_REGEX_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_REGEX_DEBUG_LIBRARY: ${BOOST_REGEX_DEBUG_LIBRARY}")

#  BOOST_SERIALIZATION_LIBRARY         The Boost Serialization libary.
  SET (BOOST_LIB serialization)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_SERIALIZATION_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_SERIALIZATION_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_SERIALIZATION_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_SERIALIZATION_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_SERIALIZATION_DEBUG_LIBRARY}")
  ENDIF (BOOST_SERIALIZATION_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_SERIALIZATION_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_SERIALIZATION_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_SERIALIZATION_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_SERIALIZATION_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_SERIALIZATION_RELEASE_LIBRARY}")
  ENDIF (BOOST_SERIALIZATION_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_SERIALIZATION_RELEASE_LIBRARY: ${BOOST_SERIALIZATION_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_SERIALIZATION_DEBUG_LIBRARY: ${BOOST_SERIALIZATION_DEBUG_LIBRARY}")



#  BOOST_SIGNALS_LIBRARY               The Boost Signals libary.
  SET (BOOST_LIB signals)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_SIGNALS_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_SIGNALS_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_SIGNALS_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_SIGNALS_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_SIGNALS_DEBUG_LIBRARY}")
  ENDIF (BOOST_SIGNALS_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_SIGNALS_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_SIGNALS_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_SIGNALS_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_SIGNALS_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_SIGNALS_RELEASE_LIBRARY}")
  ENDIF (BOOST_SIGNALS_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_SIGNALS_RELEASE_LIBRARY: ${BOOST_SIGNALS_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_SIGNALS_DEBUG_LIBRARY: ${BOOST_SIGNALS_DEBUG_LIBRARY}")


#  BOOST_TEST_EXEC_MONITOR_LIBRARY     The Boost Test Exec Monitor libary.
  SET (BOOST_LIB test_exec_monitor)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY}")
  ENDIF (BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY}")
  ENDIF (BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY: ${BOOST_TEST_EXEC_MONITOR_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY: ${BOOST_TEST_EXEC_MONITOR_DEBUG_LIBRARY}")
  
  
#  BOOST_THREAD_LIBRARY                The Boost Thread libary.
  SET (BOOST_LIB thread)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_THREAD_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_THREAD_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_THREAD_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_THREAD_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_THREAD_DEBUG_LIBRARY}")
  ENDIF (BOOST_THREAD_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_THREAD_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_THREAD_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_THREAD_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_THREAD_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_THREAD_RELEASE_LIBRARY}")
  ENDIF (BOOST_THREAD_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_THREAD_RELEASE_LIBRARY: ${BOOST_THREAD_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_THREAD_DEBUG_LIBRARY: ${BOOST_THREAD_DEBUG_LIBRARY}")


#  BOOST_UNIT_TEST_FRAMEWORK_LIBRARY   The Boost Unit Test Framework libary.
  SET (BOOST_LIB unit_test_framework)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY}")
  ENDIF (BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY}")
  ENDIF (BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY: ${BOOST_UNIT_TEST_FRAMEWORK_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY: ${BOOST_UNIT_TEST_FRAMEWORK_DEBUG_LIBRARY}")



#  BOOST_WSERIALIZATION_LIBRARY        The Boost WSerialization libary.
  SET (BOOST_LIB wserialization)
  SET (BOOST_DEBUG_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}${BOOST_ABI_TAG}-${BOOST_CURRENT_VERSION})
  SET (BOOST_RELEASE_LIB_NAME boost_${BOOST_LIB}${BOOST_COMPILER}${BOOST_MULTITHREADED}-${BOOST_CURRENT_VERSION})
  # SET (BOOST_FULL_LIB_NAME ${BOOST_LIB_PREFIX}${BOOST_PARTIAL_LIB_NAME}.${BOOST_EXTENSION})
  # # MESSAGE(STATUS "BOOST_DEBUG_LIB_NAME:   ${BOOST_DEBUG_LIB_NAME}")
  # MESSAGE (STATUS "BOOST_RELEASE_LIB_NAME: ${BOOST_RELEASE_LIB_NAME} ")
  
  FIND_LIBRARY(BOOST_WSERIALIZATION_DEBUG_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_DEBUG_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_WSERIALIZATION_DEBUG_LIBRARY)
    SET(BOOST_DEBUG_LIBRARIES
      ${BOOST_DEBUG_LIBRARIES}
      ${BOOST_WSERIALIZATION_DEBUG_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_WSERIALIZATION_DEBUG_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_WSERIALIZATION_DEBUG_LIBRARY}")
  ENDIF (BOOST_WSERIALIZATION_DEBUG_LIBRARY)
  
  FIND_LIBRARY(BOOST_WSERIALIZATION_RELEASE_LIBRARY
    NAMES ${BOOST_LIB_PREFIX}${BOOST_RELEASE_LIB_NAME}
    PATHS ${BOOST_LIBRARIES_SEARCH_DIRS}
    NO_DEFAULT_PATH
    )
  IF (BOOST_WSERIALIZATION_RELEASE_LIBRARY)
    SET(BOOST_RELEASE_LIBRARIES
      ${BOOST_RELEASE_LIBRARIES}
      ${BOOST_WSERIALIZATION_RELEASE_LIBRARY}
    )
    MARK_AS_ADVANCED(BOOST_WSERIALIZATION_RELEASE_LIBRARY)
    # # MESSAGE(STATUS "Found ${BOOST_WSERIALIZATION_RELEASE_LIBRARY}")
  ENDIF (BOOST_WSERIALIZATION_RELEASE_LIBRARY)
  # MESSAGE(STATUS "BOOST_WSERIALIZATION_RELEASE_LIBRARY: ${BOOST_WSERIALIZATION_RELEASE_LIBRARY}")
  # MESSAGE(STATUS "BOOST_WSERIALIZATION_DEBUG_LIBRARY: ${BOOST_WSERIALIZATION_DEBUG_LIBRARY}")
  
  
    SET(BOOST_INCLUDE_DIRS
    ${BOOST_INCLUDE_DIR}
    )
    
    IF( CMAKE_BUILD_TYPE MATCHES Debug)
      SET (BOOST_LIBRARIES ${BOOST_DEBUG_LIBRARIES})
    ELSE ( CMAKE_BUILD_TYPE MATCHES Debug)
      SET (BOOST_LIBRARIES ${BOOST_RELEASE_LIBRARIES})
    ENDIF ( CMAKE_BUILD_TYPE MATCHES Debug)

  IF (BOOST_INCLUDE_DIRS AND BOOST_LIBRARIES)
    SET(BOOST_FOUND TRUE)
  ENDIF(BOOST_INCLUDE_DIRS AND BOOST_LIBRARIES)

  IF (BOOST_FOUND)
    IF (NOT Boost_FIND_QUIETLY)
      MESSAGE(STATUS "Found The Following Boost Libraries:")
      FOREACH (TMP_LIB  ${BOOST_LIBRARIES} )
        MESSAGE (STATUS "  ${TMP_LIB}")
      ENDFOREACH(TMP_LIB)
    ENDIF(NOT Boost_FIND_QUIETLY)
  ELSE (BOOST_FOUND)
    IF (Boost_FIND_REQUIRED)
      MESSAGE(FATAL_ERROR "Please install the Boost libraries AND development packages")
    ENDIF(Boost_FIND_REQUIRED)
  ENDIF(BOOST_FOUND)

  FOREACH (BOOST_LIBDIR ${BOOST_LIBRARIES})
    GET_FILENAME_COMPONENT(BOOST_LIBRARY_DIRS ${BOOST_LIBDIR} PATH)
  ENDFOREACH (BOOST_LIBDIR ${BOOST_LIBRARIES})

  # Under Windows, automatic linking is performed, so no need to specify the libraries.
  IF (WIN32)
    SET(BOOST_LIBRARIES "")
  ENDIF(WIN32)

  # show the BOOST_INCLUDE_DIRS AND BOOST_LIBRARIES variables only in the advanced view
  MARK_AS_ADVANCED(BOOST_INCLUDE_DIRS 
    BOOST_LIBRARIES 
    BOOST_LIBRARY_DIRS 
    BOOST_DEFINITIONS 
    BOOST_LIBRARIES_SUFFIX
    )

ENDIF(BOOST_LIBRARIES AND BOOST_INCLUDE_DIRS)
