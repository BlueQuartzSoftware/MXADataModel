# - Find the Boost includes and libraries.
# The following variables are set if Boost is found.  If Boost is not
# found, BOOST_FOUND is set to false.
#  BOOST_FOUND        - True when the Boost include directory is found.
#  BOOST_INCLUDE_DIRS - the path to where the boost include files are.
#  BOOST_LIBRARY_DIRS - The path to where the boost library files are.
#  BOOST_LIB_DIAGNOSTIC_DEFINITIONS - Only set if using Windows.

# ----------------------------------------------------------------------------
# If you have installed Boost in a non-standard location or you have
# just staged the boost files using bjam then you have three
# options. In the following comments, it is assumed that <Your Path>
# points to the root directory of the include directory of Boost. e.g
# If you have put boost in C:\development\Boost then <Your Path> is
# "C:/development/Boost" and in this directory there will be two
# directories called "include" and "lib".
# 1) After CMake runs, set BOOST_INCLUDE_DIR to <Your Path>/include/boost<-version>
# 2) Use CMAKE_INCLUDE_PATH to set a path to <Your Path>/include. This will allow FIND_PATH()
#    to locate BOOST_INCLUDE_DIR by utilizing the PATH_SUFFIXES option. e.g.
#    SET(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} "<Your Path>/include")
# 3) Set an environment variable called ${BOOST_ROOT} that points to the root of where you have
#    installed Boost, e.g. <Your Path>. It is assumed that there is at least a subdirectory called
#    include in this path.
#
# Note:
#  1) If you are just using the boost headers, then you do not need to use
#     BOOST_LIBRARY_DIRS in your CMakeLists.txt file.
#  2) If Boost has not been installed, then when setting BOOST_LIBRARY_DIRS
#     the script will look for /lib first and, if this fails, then for /stage/lib.
#
# Usage:
# In your CMakeLists.txt file do something like this:
# ...
# # Boost
# FIND_PACKAGE(Boost)
# ...
# INCLUDE_DIRECTORIES(${BOOST_INCLUDE_DIRS})
# LINK_DIRECTORIES(${BOOST_LIBRARY_DIRS})
#
# In Windows, we make the assumption that, if the Boost files are installed, the default directory
# will be C:\boost.

#
# TODO:
#
# 1) Automatically find the Boost library files and eliminate the need
#    to use Link Directories.
#

IF(WIN32)
  # In windows, automatic linking is performed, so you do not have to specify the libraries.
  # If you are linking to a dynamic runtime, then you can choose to link to either a static or a
  # dynamic Boost library, the default is to do a static link.  You can alter this for a specific
  # library "whatever" by defining BOOST_WHATEVER_DYN_LINK to force Boost library "whatever" to
  # be linked dynamically.  Alternatively you can force all Boost libraries to dynamic link by
  # defining BOOST_ALL_DYN_LINK.

  # This feature can be disabled for Boost library "whatever" by defining BOOST_WHATEVER_NO_LIB,
  # or for all of Boost by defining BOOST_ALL_NO_LIB.

  # If you want to observe which libraries are being linked against then defining
  # BOOST_LIB_DIAGNOSTIC will cause the auto-linking code to emit a #pragma message each time
  # a library is selected for linking.
  SET(BOOST_LIB_DIAGNOSTIC_DEFINITIONS "-DBOOST_LIB_DIAGNOSTIC -DBOOST_ALL_DYN_LINK")
ENDIF(WIN32)


SET(BOOST_INCLUDE_PATH_DESCRIPTION "directory containing the boost include files. E.g /usr/local/include/boost-1_34 or c:/Boost/include/boost-1_34")

SET(BOOST_DIR_MESSAGE "Set the BOOST_INCLUDE_DIR cmake cache entry to the ${BOOST_INCLUDE_PATH_DESCRIPTION}")

SET(BOOST_DIR_SEARCH $ENV{BOOST_ROOT})
IF(BOOST_DIR_SEARCH)
  FILE(TO_CMAKE_PATH ${BOOST_DIR_SEARCH} BOOST_DIR_SEARCH)
  SET(BOOST_DIR_SEARCH ${BOOST_DIR_SEARCH}/include)
ENDIF(BOOST_DIR_SEARCH)

IF(WIN32)
  SET(BOOST_DIR_SEARCH
    ${BOOST_DIR_SEARCH}
    C:/boost/include
    D:/boost/include
  )
ENDIF(WIN32)

# Add in some path suffixes. These will have to be updated whenever a new Boost version comes out.
SET(SUFFIX_FOR_PATH
 boost-1_34_1
 boost-1_34
 boost-1_33_1
 boost-1_33_0
)

SET (BOOST_LIBRARIES "")
SET (BOOST "boost")
SET (BOOST_VERSION "-1_34_1")
SET (BOOST_DEBUG "-d")
# - Boost has a naming scheme that we have to match..
IF (MINGW)
SET (BOOST_COMPILER "-mgw")
ENDIF (MINGW)
# -- Look for the Visual Studio 7.1, MultiThreaded Libraries
IF (MSVC)
SET (BOOST_COMPILER "-vc71-mt")
ENDIF(MSVC)


#
# Look for an installation.
#
FIND_PATH(BOOST_INCLUDE_DIR NAMES boost/config.hpp PATH_SUFFIXES ${SUFFIX_FOR_PATH} PATHS

  # Look in other places.
  ${BOOST_DIR_SEARCH}

  # Help the user find it if we cannot.
  DOC "The ${BOOST_INCLUDE_PATH_DESCRIPTION}"
)

MARK_AS_ADVANCED(BOOST_INCLUDE_DIR)
# Assume we didn't find it.
SET(BOOST_FOUND 0)

# Now try to get the include and library path.
IF(BOOST_INCLUDE_DIR)

  # Look for the boost library path.
  # Note that the user may not have installed any libraries
  # so it is quite possible the BOOST_LIBRARY_PATH may not exist.
  SET(BOOST_LIBRARY_DIR ${BOOST_INCLUDE_DIR})

  IF("${BOOST_LIBRARY_DIR}" MATCHES "boost-[0-9]+")
    GET_FILENAME_COMPONENT(BOOST_LIBRARY_DIR ${BOOST_LIBRARY_DIR} PATH)
  ENDIF ("${BOOST_LIBRARY_DIR}" MATCHES "boost-[0-9]+")

  IF("${BOOST_LIBRARY_DIR}" MATCHES "/include$")
    # Strip off the trailing "/include" in the path.
    GET_FILENAME_COMPONENT(BOOST_LIBRARY_DIR ${BOOST_LIBRARY_DIR} PATH)
  ENDIF("${BOOST_LIBRARY_DIR}" MATCHES "/include$")

  IF(EXISTS "${BOOST_LIBRARY_DIR}/lib")
    SET (BOOST_LIBRARY_DIR ${BOOST_LIBRARY_DIR}/lib)
  ELSE(EXISTS "${BOOST_LIBRARY_DIR}/lib")
    IF(EXISTS "${BOOST_LIBRARY_DIR}/stage/lib")
      SET(BOOST_LIBRARY_DIR ${BOOST_LIBRARY_DIR}/stage/lib)
    ELSE(EXISTS "${BOOST_LIBRARY_DIR}/stage/lib")
      SET(BOOST_LIBRARY_DIR "")
    ENDIF(EXISTS "${BOOST_LIBRARY_DIR}/stage/lib")
  ENDIF(EXISTS "${BOOST_LIBRARY_DIR}/lib")

  IF(EXISTS "${BOOST_INCLUDE_DIR}")
    SET(BOOST_INCLUDE_DIRS ${BOOST_INCLUDE_DIR})
    # We have found boost. It is possible that the user has not
    # compiled any libraries so we set BOOST_FOUND to be true here.
    SET(BOOST_FOUND 1)
  ENDIF(EXISTS "${BOOST_INCLUDE_DIR}")

  IF(BOOST_LIBRARY_DIR AND EXISTS "${BOOST_LIBRARY_DIR}")
    SET(BOOST_LIBRARY_DIRS ${BOOST_LIBRARY_DIR})
  ENDIF(BOOST_LIBRARY_DIR AND EXISTS "${BOOST_LIBRARY_DIR}")
ENDIF(BOOST_INCLUDE_DIR)

IF(NOT BOOST_FOUND)
  IF(NOT BOOST_FIND_QUIETLY)
    MESSAGE(STATUS "Boost was not found. ${BOOST_DIR_MESSAGE}")
  ELSE(NOT BOOST_FIND_QUIETLY)
    IF(BOOST_FIND_REQUIRED)
      MESSAGE(FATAL_ERROR "Boost was not found. ${BOOST_DIR_MESSAGE}")
    ENDIF(BOOST_FIND_REQUIRED)
  ENDIF(NOT BOOST_FIND_QUIETLY)
ENDIF(NOT BOOST_FOUND)

IF ( BOOST_FOUND )
  INCLUDE_DIRECTORIES( ${BOOST_INCLUDE_DIRS} ${INCLUDE_DIRECTORIES})
ENDIF ( BOOST_FOUND )

# ------------ Check for Each Boost Library ----------------
#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_DATE_TIME )
  #-- Set the Release and Debug library variables for DATE_TIME
  SET (BOOST_DATE_TIME_NAME "date_time")

  #-- Try to find the release version of the date_time library
  FIND_LIBRARY(BOOST_DATE_TIME_LIBRARY "${BOOST}_${BOOST_DATE_TIME_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_DATE_TIME_LIBRARY)

  #-- Try to find the debug version of the date_time library
  FIND_LIBRARY(BOOST_DATE_TIME_LIBRARY_DEBUG "${BOOST}_${BOOST_DATE_TIME_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_DATE_TIME_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_DATE_TIME_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_DATE_TIME_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_DATE_TIME_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_DATE_TIME_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_DATE_TIME_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_DATE_TIME_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_DATE_TIME_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_DATE_TIME_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_DATE_TIME )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_FILESYSTEM )
  #-- Set the Release and Debug library variables for FILESYSTEM
  SET (BOOST_FILESYSTEM_NAME "filesystem")

  #-- Try to find the release version of the filesystem library
  FIND_LIBRARY(BOOST_FILESYSTEM_LIBRARY "${BOOST}_${BOOST_FILESYSTEM_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_FILESYSTEM_LIBRARY)

  #-- Try to find the debug version of the filesystem library
  FIND_LIBRARY(BOOST_FILESYSTEM_LIBRARY_DEBUG 
    "${BOOST}_${BOOST_FILESYSTEM_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_FILESYSTEM_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_FILESYSTEM_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_FILESYSTEM_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_FILESYSTEM_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_FILESYSTEM_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_FILESYSTEM_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_FILESYSTEM_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_FILESYSTEM_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_FILESYSTEM_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_FILESYSTEM )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_IOSTREAMS )
  #-- Set the Release and Debug library variables for IOSTREAMS
  SET (BOOST_IOSTREAMS_NAME "iostreams")

  #-- Try to find the release version of the iostreams library
  FIND_LIBRARY(BOOST_IOSTREAMS_LIBRARY "${BOOST}_${BOOST_IOSTREAMS_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_IOSTREAMS_LIBRARY)

  #-- Try to find the debug version of the iostreams library
  FIND_LIBRARY(BOOST_IOSTREAMS_LIBRARY_DEBUG "${BOOST}_${BOOST_IOSTREAMS_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_IOSTREAMS_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_IOSTREAMS_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_IOSTREAMS_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_IOSTREAMS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_IOSTREAMS_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_IOSTREAMS_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_IOSTREAMS_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_IOSTREAMS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_IOSTREAMS_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_IOSTREAMS )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_PRG_EXEC_MONITOR )
  #-- Set the Release and Debug library variables for PRG_EXEC_MONITOR
  SET (BOOST_PRG_EXEC_MONITOR_NAME "prg_exec_monitor")

  #-- Try to find the release version of the prg_exec_monitor library
  FIND_LIBRARY(BOOST_PRG_EXEC_MONITOR_LIBRARY "${BOOST}_${BOOST_PRG_EXEC_MONITOR_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PRG_EXEC_MONITOR_LIBRARY)

  #-- Try to find the debug version of the prg_exec_monitor library
  FIND_LIBRARY(BOOST_PRG_EXEC_MONITOR_LIBRARY_DEBUG "${BOOST}_${BOOST_PRG_EXEC_MONITOR_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PRG_EXEC_MONITOR_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_PRG_EXEC_MONITOR_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_PRG_EXEC_MONITOR_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PRG_EXEC_MONITOR_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PRG_EXEC_MONITOR_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_PRG_EXEC_MONITOR_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_PRG_EXEC_MONITOR_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PRG_EXEC_MONITOR_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PRG_EXEC_MONITOR_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_PRG_EXEC_MONITOR )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_PROGRAM_OPTIONS )
  #-- Set the Release and Debug library variables for PROGRAM_OPTIONS
  SET (BOOST_PROGRAM_OPTIONS_NAME "program_options")

  #-- Try to find the release version of the program_options library
  FIND_LIBRARY(BOOST_PROGRAM_OPTIONS_LIBRARY "${BOOST}_${BOOST_PROGRAM_OPTIONS_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PROGRAM_OPTIONS_LIBRARY)

  #-- Try to find the debug version of the program_options library
  FIND_LIBRARY(BOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG "${BOOST}_${BOOST_PROGRAM_OPTIONS_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_PROGRAM_OPTIONS_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_PROGRAM_OPTIONS_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PROGRAM_OPTIONS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PROGRAM_OPTIONS_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PROGRAM_OPTIONS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PROGRAM_OPTIONS_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_PROGRAM_OPTIONS )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_PYTHON )
  #-- Set the Release and Debug library variables for PYTHON
  SET (BOOST_PYTHON_NAME "python")

  #-- Try to find the release version of the python library
  FIND_LIBRARY(BOOST_PYTHON_LIBRARY "${BOOST}_${BOOST_PYTHON_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PYTHON_LIBRARY)

  #-- Try to find the debug version of the python library
  FIND_LIBRARY(BOOST_PYTHON_LIBRARY_DEBUG "${BOOST}_${BOOST_PYTHON_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_PYTHON_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_PYTHON_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_PYTHON_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PYTHON_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PYTHON_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_PYTHON_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_PYTHON_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_PYTHON_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_PYTHON_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_PYTHON )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_REGEX )
  #-- Set the Release and Debug library variables for REGEX
  SET (BOOST_REGEX_NAME "regex")

  #-- Try to find the release version of the regex library
  FIND_LIBRARY(BOOST_REGEX_LIBRARY "${BOOST}_${BOOST_REGEX_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_REGEX_LIBRARY)

  #-- Try to find the debug version of the regex library
  FIND_LIBRARY(BOOST_REGEX_LIBRARY_DEBUG "${BOOST}_${BOOST_REGEX_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_REGEX_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_REGEX_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_REGEX_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_REGEX_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_REGEX_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_REGEX_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_REGEX_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_REGEX_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_REGEX_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_REGEX )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_SERIALIZATION )
  #-- Set the Release and Debug library variables for SERIALIZATION
  SET (BOOST_SERIALIZATION_NAME "serialization")

  #-- Try to find the release version of the serialization library
  FIND_LIBRARY(BOOST_SERIALIZATION_LIBRARY "${BOOST}_${BOOST_SERIALIZATION_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_SERIALIZATION_LIBRARY)

  #-- Try to find the debug version of the serialization library
  FIND_LIBRARY(BOOST_SERIALIZATION_LIBRARY_DEBUG "${BOOST}_${BOOST_SERIALIZATION_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_SERIALIZATION_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_SERIALIZATION_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_SERIALIZATION_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_SERIALIZATION_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_SERIALIZATION_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_SERIALIZATION_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_SERIALIZATION_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_SERIALIZATION_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_SERIALIZATION_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_SERIALIZATION )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_SIGNALS )
  #-- Set the Release and Debug library variables for SIGNALS
  SET (BOOST_SIGNALS_NAME "signals")

  #-- Try to find the release version of the signals library
  FIND_LIBRARY(BOOST_SIGNALS_LIBRARY "${BOOST}_${BOOST_SIGNALS_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_SIGNALS_LIBRARY)

  #-- Try to find the debug version of the signals library
  FIND_LIBRARY(BOOST_SIGNALS_LIBRARY_DEBUG "${BOOST}_${BOOST_SIGNALS_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_SIGNALS_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_SIGNALS_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_SIGNALS_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_SIGNALS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_SIGNALS_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_SIGNALS_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_SIGNALS_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_SIGNALS_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_SIGNALS_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_SIGNALS )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_TEST_EXEC_MONITOR )
  #-- Set the Release and Debug library variables for TEST_EXEC_MONITOR
  SET (BOOST_TEST_EXEC_MONITOR_NAME "test_exec_monitor")

  #-- Try to find the release version of the test_exec_monitor library
  FIND_LIBRARY(BOOST_TEST_EXEC_MONITOR_LIBRARY "${BOOST}_${BOOST_TEST_EXEC_MONITOR_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_TEST_EXEC_MONITOR_LIBRARY)

  #-- Try to find the debug version of the test_exec_monitor library
  FIND_LIBRARY(BOOST_TEST_EXEC_MONITOR_LIBRARY_DEBUG "${BOOST}_${BOOST_TEST_EXEC_MONITOR_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_TEST_EXEC_MONITOR_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_TEST_EXEC_MONITOR_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_TEST_EXEC_MONITOR_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_TEST_EXEC_MONITOR_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_TEST_EXEC_MONITOR_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_TEST_EXEC_MONITOR_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_TEST_EXEC_MONITOR_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_TEST_EXEC_MONITOR_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_TEST_EXEC_MONITOR_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_TEST_EXEC_MONITOR )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_THREAD )
  #-- Set the Release and Debug library variables for THREAD
  SET (BOOST_THREAD_NAME "thread")

  #-- Try to find the release version of the thread library
  FIND_LIBRARY(BOOST_THREAD_LIBRARY "${BOOST}_${BOOST_THREAD_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_THREAD_LIBRARY)

  #-- Try to find the debug version of the thread library
  FIND_LIBRARY(BOOST_THREAD_LIBRARY_DEBUG "${BOOST}_${BOOST_THREAD_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_THREAD_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_THREAD_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_THREAD_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_THREAD_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_THREAD_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_THREAD_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_THREAD_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_THREAD_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_THREAD_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_THREAD )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_UNIT_TEST_FRAMEWORK )
  #-- Set the Release and Debug library variables for UNIT_TEST_FRAMEWORK
  SET (BOOST_UNIT_TEST_FRAMEWORK_NAME "unit_test_framework")

  #-- Try to find the release version of the unit_test_framework library
  FIND_LIBRARY(BOOST_UNIT_TEST_FRAMEWORK_LIBRARY "${BOOST}_${BOOST_UNIT_TEST_FRAMEWORK_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_UNIT_TEST_FRAMEWORK_LIBRARY)

  #-- Try to find the debug version of the unit_test_framework library
  FIND_LIBRARY(BOOST_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG "${BOOST}_${BOOST_UNIT_TEST_FRAMEWORK_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_UNIT_TEST_FRAMEWORK_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_UNIT_TEST_FRAMEWORK_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_UNIT_TEST_FRAMEWORK_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_UNIT_TEST_FRAMEWORK_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_UNIT_TEST_FRAMEWORK_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_UNIT_TEST_FRAMEWORK_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_UNIT_TEST_FRAMEWORK )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_WAVE )
  #-- Set the Release and Debug library variables for WAVE
  SET (BOOST_WAVE_NAME "wave")

  #-- Try to find the release version of the wave library
  FIND_LIBRARY(BOOST_WAVE_LIBRARY "${BOOST}_${BOOST_WAVE_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_WAVE_LIBRARY)

  #-- Try to find the debug version of the wave library
  FIND_LIBRARY(BOOST_WAVE_LIBRARY_DEBUG "${BOOST}_${BOOST_WAVE_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_WAVE_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_WAVE_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_WAVE_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_WAVE_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_WAVE_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_WAVE_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_WAVE_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_WAVE_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_WAVE_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_WAVE )

#-- Add the library to the BOOST_LIBRARIES variable if found and the user asked for it
IF ( BOOST_USE_WSERIALIZATION )
  #-- Set the Release and Debug library variables for WSERIALIZATION
  SET (BOOST_WSERIALIZATION_NAME "wserialization")

  #-- Try to find the release version of the wserialization library
  FIND_LIBRARY(BOOST_WSERIALIZATION_LIBRARY "${BOOST}_${BOOST_WSERIALIZATION_NAME}${BOOST_COMPILER}${BOOST_VERSION}" 
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_WSERIALIZATION_LIBRARY)

  #-- Try to find the debug version of the wserialization library
  FIND_LIBRARY(BOOST_WSERIALIZATION_LIBRARY_DEBUG "${BOOST}_${BOOST_WSERIALIZATION_NAME}${BOOST_COMPILER}${BOOST_DEBUG}${BOOST_VERSION}"
      ${BOOST_LIBRARY_DIR}
  )
  MARK_AS_ADVANCED(BOOST_WSERIALIZATION_LIBRARY_DEBUG)

  #-- Check and add the release version of the library
  IF ( BOOST_WSERIALIZATION_LIBRARY )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        optimized "${BOOST_WSERIALIZATION_LIBRARY}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_WSERIALIZATION_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_WSERIALIZATION_LIBRARY )
  #-- Check and add the debug version of the library
  IF ( BOOST_WSERIALIZATION_LIBRARY_DEBUG )
    IF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES}
        debug "${BOOST_WSERIALIZATION_LIBRARY_DEBUG}"
        )
    ELSE (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
      SET(BOOST_LIBRARIES ${BOOST_LIBRARIES} "${BOOST_WSERIALIZATION_LIBRARY}")
    ENDIF (CMAKE_CONFIGURATION_TYPES OR CMAKE_BUILD_TYPE)
  ENDIF ( BOOST_WSERIALIZATION_LIBRARY_DEBUG )	
ENDIF ( BOOST_USE_WSERIALIZATION )

